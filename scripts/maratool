#!/usr/bin/env python

try:
    # ------------------------------------------------------------------
    # If running the script from somewhere else, can add location of the
    # mara_tools module to maratool_cfg.py by doing
    #
    # sys.path += ['/path/containing/mara_tools']
    # ------------------------------------------------------------------
    import maratool_cfg
except ImportError:
    pass


import sys
import argparse
import numpy as np
import h5py
from mara_tools import gaussfield
from mara_tools import chkptlog
from mara_tools import synchsky
from mara_tools import genchkpt
from mara_tools import cutplanes
from mara_tools import reductions


def cmd_gaussian_bfield():

    def small_scale(k):
        k0 = 0.01
        return pow(k,12) * np.exp(-k/k0);
    def small_scale_narrow(k):
        """
        Sam: can mess with this function
        """
        k0 = 0.01
        return pow(k,12) * np.exp(-(k/k0)**2);
    def flat(k):
        return 1.0

    spectral_shapes = {'small_scale': small_scale,
                       'small_scale_narrow': small_scale_narrow,
                       'flat': flat}

    parser = argparse.ArgumentParser()
    parser.add_argument("-o", "--outfile",
                        help="output HDF5 file name", default="chkpt.0000.h5")
    parser.add_argument("--rms", type=float,
                        help="RMS value of magnetic field", default=1.0)
    parser.add_argument("-N", "--resolution", type=int,
                        help="domain resulution (N^3)", default=32)
    parser.add_argument("--spectrum", type=str, default='small_scale',
                        choices=spectral_shapes.keys())
    parser.add_argument("--show-spectrum", action='store_true',
                        help="just show the power spectrum and exit")
    parser.add_argument("--toth", action='store_true',
                        help="Toth-divergenceless field (instead of spectral)")
    args = parser.parse_args()

    N = args.resolution
    PofK = spectral_shapes[args.spectrum]

    if args.show_spectrum:
        import matplotlib.pyplot as plt
        k = np.logspace(-3.0, 0.0, 1000)
        plt.loglog(k, [PofK(ki) for ki in k])
        plt.xlabel(r'$k$')
        plt.ylabel(r'$dP/dk$')
        plt.show()
        return

    chkpt = genchkpt.MaraCheckpointCreator(args.outfile, [N,N,N], mhd=True)
    field = gaussfield.GaussianRandomVectorField3d(N, rms=args.rms,
                                                   Pofk=PofK)
    if args.toth:
        B = field.get_toth_potential_field()
    else:
        B = field.get_field(zeta=1.0)

    def callback(prim):
        prim['pre'][:] = 1.0
        prim['rho'][:] = 1.0
        prim['vx'][:] = 0.0
        prim['vy'][:] = 0.0
        prim['vz'][:] = 0.0
        prim['Bx'][:] = B[0]
        prim['By'][:] = B[1]
        prim['Bz'][:] = B[2]

    chkpt.apply_initial_data(callback)
    chkpt.set_comment(str(vars(args)))


def cmd_show_log():
    parser = argparse.ArgumentParser()
    parser.add_argument("filename")
    args = parser.parse_args()

    chkpt = chkptlog.MaraCheckpointLoggedData(args.filename)
    chkpt.plot_fields(['mag', 'kin', 'tie'])



def cmd_synchsky():
    parser = argparse.ArgumentParser()
    parser.add_argument("filename")
    parser.add_argument("-o", "--outfile", type=str,
                        help="output HDF5 file name", default="synchsky.h5")
    parser.add_argument("-a", "--axis", type=int, choices=[0,1,2], default=0,
                        help="output HDF5 file name")
    parser.add_argument("--show", action="store_true")
    args = parser.parse_args()

    try:
        chkpt = synchsky.StokesMaraCheckpointFile(args.filename)
        stokes = chkpt.stokes_image(axis=args.axis)
        stokes.save(args.outfile)
        if args.show:
            stokes.make_figures2()
    except RuntimeError:
        stokes = synchsky.StokesVectorsImage()
        stokes.load(args.filename)
        stokes.make_figures2()



def cmd_cutplanes():
    cls = cutplanes.MaraCheckpointCutplaneExtractor
    parser = argparse.ArgumentParser()
    get_kwargs = cls.populate_parser('plot_slice', parser)
    parser.add_argument("filename")
    pargs = parser.parse_args()
    chkpt = cls(pargs.filename)
    chkpt.plot_slice(**get_kwargs(pargs))



def cmd_power_spectrum():
    cls = reductions.MaraReductionsReader
    parser = argparse.ArgumentParser()
    get_kwargs = cls.populate_parser('plot_power_spectra', parser)
    parser.add_argument("filename")
    pargs = parser.parse_args()
    reduc = cls(pargs.filename)
    reduc.plot_power_spectra(**get_kwargs(pargs))



def cmd_pspec_evolve():
    cls = reductions.MaraReductionsReader
    parser = argparse.ArgumentParser()
    get_kwargs = cls.populate_parser('plot_time_devel', parser)
    parser.add_argument("filename")
    pargs = parser.parse_args()
    reduc = cls(pargs.filename)
    reduc.plot_time_devel(**get_kwargs(pargs))



if __name__ == "__main__":

    cmds = [c for c in dir() if c.startswith('cmd_')]

    if len(sys.argv) > 1 and 'cmd_' + sys.argv[1] in cmds:
        cmd = 'cmd_' + sys.argv[1]
        del sys.argv[1]
        exec(cmd + "()")
    else:
        print "commands are:"
        print "\t" + "\n\t".join([c[4:] for c in cmds])

