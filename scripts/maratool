#!/usr/bin/env python

try:
    # ------------------------------------------------------------------
    # If running the script from somewhere else, can add location of the
    # mara_tools module to maratool_cfg.py by doing
    #
    # sys.path += ['/path/containing/mara_tools']
    # ------------------------------------------------------------------
    import maratool_cfg
except ImportError:
    pass


import sys
import argparse
import pickle
import numpy as np
import h5py
from mara_tools import gaussfield
from mara_tools import chkptlog
from mara_tools import synchsky
from mara_tools import genchkpt
from mara_tools import cutplanes
from mara_tools import reductions
from mara_tools import mhd_forces
from mara_tools import pub_figs


def cmd_gaussian_bfield():

    def small_scale(k):
        return pow(k,12) * np.exp(-k/k0)
    def small_scale_narrow(k):
        x0 = np.log(k0)
        x = np.log(k)
        y = -((x - x0) / 0.05)**2
        return np.exp(y)
    def flat(k):
        return 1.0

    spectral_shapes = {'small_scale': small_scale,
                       'small_scale_narrow': small_scale_narrow,
                       'flat': flat}

    parser = argparse.ArgumentParser()
    parser.add_argument("-o", "--outfile",
                        help="output HDF5 file name", default="chkpt.0000.h5")
    parser.add_argument("--rms", type=float,
                        help="RMS value of magnetic field", default=1.0)
    parser.add_argument("--kpeak", type=float,
                        help="wavenumber of max power", default=0.01)
    parser.add_argument("-N", "--resolution", type=int,
                        help="domain resulution (N^3)", default=32)
    parser.add_argument("--spectrum", type=str, default='small_scale',
                        choices=spectral_shapes.keys())
    parser.add_argument("--show-spectrum", action='store_true',
                        help="just show the functional power spectrum and exit")
    parser.add_argument("--show-spectrum-after", action='store_true',
                        help="show the power spectrum of generated field")
    parser.add_argument("--toth", action='store_true',
                        help="Toth-divergenceless field (instead of spectral)")
    parser.add_argument("--force-free", type=float, default=None,
                        help="wavenumber at which to enforce force-free field")
    parser.add_argument("--perturbation", type=float, default=0.0,
                        help="surpression factor for off-shell modes, if in "
                        "force-free mode")
    parser.add_argument("--mean-field", type=float, default=0.0,
                        help="value of the mean field along the x-direction")
    parser.add_argument("--hydro", action='store_true',
                        help="make random velocity field for hydro initial data")
    parser.add_argument("--write-random-state", type=str, default=None,
                        help="file in which to pickle the random state vector")
    parser.add_argument("--read-random-state", type=str, default=None,
                        help="file from which to read the random state vector")

    args = parser.parse_args()

    N = args.resolution
    k0 = args.kpeak
    kff = args.force_free
    PofK = spectral_shapes[args.spectrum]

    if args.show_spectrum:
        import matplotlib.pyplot as plt
        k = np.logspace(-3.0, 0.0, 1000)
        plt.loglog(k, [PofK(ki) for ki in k])
        plt.xlabel(r'$k$')
        plt.ylabel(r'$dP/dk$')
        plt.show()
        return

    if args.read_random_state is None:
        random_state = None
    elif args.read_random_state.endswith('.h5'):
        h5file = h5py.File(args.read_random_state, 'r')
        random_state = pickle.loads(h5file['numpy_random_state'].value)
    else:
        random_state = pickle.load(open(args.read_random_state))

    chkpt = genchkpt.MaraCheckpointCreator(args.outfile, [N,N,N],
                                           mhd=not args.hydro)
    field = gaussfield.GaussianRandomVectorField3d(N,
                                                   rms=args.rms,
                                                   Pofk=PofK,
                                                   random_state=random_state)
    if args.toth:
        B = field.get_toth_potential_field(force_free=kff,
                                           mean_field=[args.mean_field, 0.0, 0.0])
    else:
        B = field.get_field(zeta=1.0, force_free=kff,
                            perturbation=args.perturbation,
                            mean_field=[args.mean_field, 0.0, 0.0])

    if args.show_spectrum_after:
        import matplotlib.pyplot as plt
        k, PD, PS = gaussfield.power_spectrum(B)
        plt.loglog(k, PS)
        plt.show()

    def callback_srmhd(prim):
        prim['pre'][:] = 1.0
        prim['rho'][:] = 1.0
        prim['vx'][:] = 0.0
        prim['vy'][:] = 0.0
        prim['vz'][:] = 0.0
        prim['Bx'][:] = B[0]
        prim['By'][:] = B[1]
        prim['Bz'][:] = B[2]

    def callback_nrhyd(prim):
        prim['pre'][:] = 1.0
        prim['rho'][:] = 1.0
        prim['vx'][:] = B[0]
        prim['vy'][:] = B[1]
        prim['vz'][:] = B[2]

    if args.hydro:
        callback = callback_nrhyd
    else:
        callback = callback_srmhd       

    chkpt.apply_initial_data(callback)
    chkpt.set_comment(str(vars(args)))
    chkpt.set_numpy_random_state(field.random_state)

    if args.write_random_state is not None:
        pickle.dump(field.random_state, open(args.write_random_state, 'w'))



def cmd_show_log():
    parser = argparse.ArgumentParser()
    parser.add_argument("filename")
    parser.add_argument("--fields", type=str, default="kin,tie")
    pargs = parser.parse_args()

    chkpt = chkptlog.MaraCheckpointLoggedData(pargs.filename)
    chkpt.plot_fields(pargs.fields.split(','))



def cmd_synchsky():
    parser = argparse.ArgumentParser()
    parser.add_argument("filename")
    parser.add_argument("-o", "--outfile", type=str,
                        help="output HDF5 file name", default="synchsky.h5")
    parser.add_argument("-a", "--axis", type=int, choices=[0,1,2], default=0,
                        help="output HDF5 file name")
    parser.add_argument("--show", action="store_true")
    args = parser.parse_args()

    try:
        chkpt = synchsky.StokesMaraCheckpointFile(args.filename)
        stokes = chkpt.stokes_image(axis=args.axis)
        stokes.save(args.outfile)
        if args.show:
            stokes.make_figures2()
    except RuntimeError:
        stokes = synchsky.StokesVectorsImage()
        stokes.load(args.filename)
        stokes.make_figures2()



def cmd_cutplanes():
    cls = cutplanes.MaraCheckpointCutplaneExtractor
    parser = argparse.ArgumentParser()
    get_kwargs = cls.populate_parser('plot_slice', parser)
    parser.add_argument("filename")
    pargs = parser.parse_args()
    chkpt = cls(pargs.filename)
    chkpt.plot_slice(**get_kwargs(pargs))



def cmd_vector_field():
    cls = cutplanes.MaraCheckpointCutplaneExtractor
    parser = argparse.ArgumentParser()
    get_kwargs = cls.populate_parser('plot_lic', parser)
    parser.add_argument("filename")
    pargs = parser.parse_args()
    chkpt = cls(pargs.filename)
    chkpt.plot_lic(**get_kwargs(pargs))



def cmd_power_spectrum():
    cls = reductions.MaraReductionsReader
    parser = argparse.ArgumentParser()
    get_kwargs = cls.populate_parser('plot_power_spectra', parser)
    parser.add_argument("filename")
    pargs = parser.parse_args()
    reduc = cls(pargs.filename)
    reduc.plot_power_spectra(**get_kwargs(pargs))



def cmd_pspec_evolve():
    cls = reductions.MaraReductionsReader
    parser = argparse.ArgumentParser()
    get_kwargs = cls.populate_parser('plot_time_devel', parser)
    parser.add_argument("filename")
    pargs = parser.parse_args()
    reduc = cls(pargs.filename)
    reduc.plot_time_devel(**get_kwargs(pargs))



def cmd_magnetic_forces():
    import matplotlib.pyplot as plt
    cls = mhd_forces.MaraCheckpointForceCalculator
    parser = argparse.ArgumentParser()
    parser.add_argument("filename")
    parser.add_argument("--method", default="spectral",
                        choices=["spectral", "finite-difference"])
    pargs = parser.parse_args()
    chkpt = cls(pargs.filename)

    B = chkpt.magnetic_field()
    P = chkpt.magnetic_pressure_gradient_force(method=pargs.method)
    T = chkpt.magnetic_tension(method=pargs.method)
    print "total magnetic forces:", (P + T).std()

    plt.figure()
    plt.imshow(-P[0,:,:,0])
    plt.colorbar()
    plt.title(r'$\frac{1}{8\pi}\nabla B^2$')
    plt.figure()
    plt.imshow(T[0,:,:,0])
    plt.colorbar()
    plt.title(r'$\frac{1}{4\pi}B \cdot \nabla B$')
    plt.figure()
    plt.imshow(T[0,:,:,0] + P[0,:,:,0])
    plt.colorbar()
    plt.title(r'$-\frac{1}{8\pi}\nabla B^2 + \frac{1}{4\pi}B \cdot \nabla B$')
    plt.show()



if __name__ == "__main__":

    cmds = [c for c in dir() if c.startswith('cmd_')]
    figs = [c for c in dir(pub_figs) if c.startswith('fig_')]

    if   len(sys.argv) > 1 and 'cmd_' + sys.argv[1] in cmds:
        cmd = 'cmd_' + sys.argv[1]
        del sys.argv[1]
        exec(cmd + "()")
    elif len(sys.argv) > 1 and 'fig_' + sys.argv[1] in figs:
        fig = 'fig_' + sys.argv[1]
        del sys.argv[1]
        getattr(pub_figs, fig)()
    else:
        print "commands are:"
        print "\t" + "\n\t".join([c[4:] for c in cmds])

        print "pre-made figures:"
        print "\t" + "\n\t".join([c[4:] for c in figs])
